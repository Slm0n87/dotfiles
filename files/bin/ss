#!/usr/bin/env ruby

require 'io/console'

begin
  require 'trollop'
rescue LoadError
  warn <<STR
Trollop isn't installed. We need that for argument parsing. Run

  gem install trollop
STR
  exit false
end

%w[INT TERM].each do |signal|
  trap(signal) { ScriptStart.quit }
end

module ScriptStart

  VERSION = '0.0'.freeze

  APM_BUNDLE_PATH  = ENV['APM_BUNDLE'].freeze
  DEFAULT_APPS     = ['property'.freeze].freeze
  DEFAULT_FORCE    = false

  def self.run(opts)
    exit_if_bad_environment
    @apps = opts.apps
    @force = opts.force
    start_apps
    input_loop
  end

  def self.command_app(app, verb)
    Command.new(app, verb, @force).run
  end

  def self.command_apps(verb)
    @apps.each { |app| command_app app, verb }
  end

  def self.start_apps
    command_apps :start
  end

  def self.stop_apps
    command_apps :stop
  end

  def self.start_app(app)
    command_app app, :start
  end

  def self.stop_app(app)
    command_app app, :stop
  end

  def self.restart_app(app)
    stop_app app
    start_app app
  end

  def self.restart_apps
    stop_apps
    start_apps
  end

  def self.exit_if_bad_environment
    if APM_BUNDLE_PATH.nil?
      warn <<STR
You need to export APM_BUNDLE to match your apm_bundle repo location.
e.g. Add this to your ~/.bash_profile

export APM_BUNDLE=~/src/apm_bundle
STR
      exit false
    end
  end

  def self.input_loop

    print_help
    loop do
      key = STDIN.getch.downcase
      case key
      when 'r'
        restart_apps
      when /\d/
        restart_app @apps[key.to_i - 1]
      when 'q', 's', "\x03" # \x03 is Ctrl-C
        quit
      else
        print_help
      end
    end
  end

  def self.print_help
    puts '='*40
    @apps.each_with_index { |app, index| puts "Press #{index+1} to restart #{app}" }
    puts 'Press r to restart apps'
    puts 'Press q to stop apps and quit'
    puts '='*40
  end


  def self.quit
    stop_apps
    exit true
  end

  private

  class Command

    COMMAND_TEMPLATE = "cd %{app_path} && script/%{verb} %{force}"

    def initialize(app, verb, force)
      @app   = app
      @verb  = verb
      @force = force
    end

    def run
      puts "Running `#{command}'"
      system command
    end

    private

    def command
      @command ||= COMMAND_TEMPLATE % {app_path: app_path(@app),
                                       verb: @verb,
                                       force: force}
    end

    def app_path(app)
      "#{APM_BUNDLE_PATH}/apps/#{app}"
    end

    def force
      '--force' if @force
    end
  end
end

opts = Trollop::options do
  version ScriptStart::VERSION
  opt :apps, 'A list of apps to start delimited by spaces', default: ScriptStart::DEFAULT_APPS
  opt :force, 'Whether to use --force with script/start (applies to all)', default: ScriptStart::DEFAULT_FORCE
end

ScriptStart.run opts
