#!/bin/bash

[ ! -z "$DEBUG_APM" ] && set -x

: "${APM_BUNDLE_PATH:=$HOME/code/apm_bundle}"

trap 'kill 0' INT TERM EXIT

readonly ARGV="$@"

declare OPTS__creating
declare OPTS__dropping
declare OPTS__loading_fixtures
declare OPTS__no_migrating
declare OPTS__no_parallel

readonly APPS_PATH=$APM_BUNDLE_PATH/apps

readonly MIGRATE_DIRS=($(
  find "$APPS_PATH" -type d -name db -print0 |
    xargs -0 -I{} find {} -type d -name migrate
))

readonly DEFAULT="\033[0m"
readonly BLUE="\033[34m"
readonly GREEN="\033[32m"
readonly MAGENTA="\033[35m"
readonly YELLOW="\033[33m"

readonly SCHEMA_CMD='git ls-files \*/schema.rb | xargs git checkout'

function help() {
  printf "mkdbs: Set up all of your APM Bundle databases

Usage: mkdbs [OPTIONS]

OPTIONS:
  -M  Don't migrate databases (rake db:migrate)
  -P  No parallelism. Do everything in serial. SLOWER.
  -S  No checking out schemas afterward. (git ls \\*/schema.rb | xargs git checkout)
  -c  Create databases (rake db:create)
  -d  Drop databases before creating (rake db:drop)
  -f  Load fixtures (rake db:fixtures:load)
  -h  Show this help

(Supports debug output thusly: DEBUG_APM=1 mkdbs)
"
}

function parse_options() {
  local OPTIND
  local OPTARG
  local opt
  while getopts 'hMPScdf' opt; do
    case "$opt" in
      h) help && exit 0 ;;
      M) OPTS__no_migrating=1 ;;
      P) OPTS__no_parallel=1 ;;
      S) OPTS__no_checking_out_schemas=1 ;;
      c) OPTS__creating=1 ;;
      d) OPTS__dropping=1 ;;
      f) OPTS__loading_fixtures=1 ;;
      *) help && exit 1 ;;
    esac
  done
}

function is_migrating() {
  [ "$OPTS__no_migrating" != 1 ]
}

function is_parallel() {
  [ "$OPTS__no_parallel" != 1 ]
}

function is_checking_out_schemas() {
  [ "$OPTS__no_checking_out_schemas" != 1 ]
}

function is_creating() {
  [ "$OPTS__creating" == 1 ]
}

function is_dropping() {
  [ "$OPTS__dropping" == 1 ]
}

function is_loading_fixtures() {
  [ "$OPTS__loading_fixtures" == 1 ]
}

function app_path_for() {
  local path=$1
  cd "$path/../.."
  pwd
}

function rake_do() {
  local path=$1;        shift
  local environment=$1; shift
  local task=$1;        shift
  local cmd="rake $task"

  echo -e "${BLUE}$path ${GREEN}$environment ${YELLOW}$cmd${DEFAULT}"

  cd "$path"
  RAILS_ENV=$environment $cmd
}

function create_databases() {
  for migrate_path in ${MIGRATE_DIRS[*]}; do
    path=$(app_path_for "$migrate_path")
    (
      for environment in test development; do
        (
          is_dropping         && rake_do "$path" $environment db:drop
          is_creating         && rake_do "$path" $environment db:create
          is_migrating        && rake_do "$path" $environment db:migrate
          is_loading_fixtures && rake_do "$path" $environment db:fixtures:load
        ) &
        is_parallel || wait
      done
      wait
    ) &
    is_parallel || wait
  done
  wait
}

# XXX This is to deal with the fact that some schemas get updated by migrating
# and then differ from the canonical versions in git.
function checkout_schemas() {
  echo -e "${MAGENTA}Checking out schema.rb files..."
  echo -e "${YELLOW}${SCHEMA_CMD}${DEFAULT}"
  cd "$APM_BUNDLE_PATH"
  eval "$SCHEMA_CMD" # Need eval because there's a pipe
}

function main() {
  parse_options "$@"
  create_databases
  is_checking_out_schemas && checkout_schemas
}

main "$ARGV"
