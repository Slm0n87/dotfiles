#!/bin/bash

GREEN="\033[32m"
DEFAULT="\033[0m"

ENOUGH_TIME_PASSED_FILE_PATH="$HOME/.config/up/enough_time_passed"
ENOUGH_TIME_PASSED_FILE_DIR=$(dirname "$ENOUGH_TIME_PASSED_FILE_PATH")

PERCONA_LAUNCH_AGENT_PLIST_PATH=\
"$HOME/Library/LaunchAgents/homebrew.mxcl.percona-server.plist"

# Latest percona-server 5.6.x from Homebrew
PERCONA_56_FORMULA_URL=\
"https://raw.githubusercontent.com/Homebrew/homebrew-core/\
eb60a5d42468552a6b6467378340d38573b503b4/Formula/percona-server.rb"

set -e

function announce() {
  printf "%b%b%b...\n" "$GREEN" "$*" "$DEFAULT"
}

function ensure_enough_time_passed_dir_exists() {
  mkdir -p "$ENOUGH_TIME_PASSED_FILE_DIR"
}

function enough_time_passed() {
  ensure_enough_time_passed_dir_exists
  # Has it been more than 7 days since the file was touched?
  test "$(find "$ENOUGH_TIME_PASSED_FILE_DIR" -mtime +7 | wc -l)" -gt 0
}

function reset_enough_time_passed() {
  announce 'Resetting enough time passed'
  rm -f "$ENOUGH_TIME_PASSED_FILE_PATH"
}

function update_enough_time_passed() {
  ensure_enough_time_passed_dir_exists
  touch "$ENOUGH_TIME_PASSED_FILE_PATH"
}

function do_percona_hack() {
  announce 'Homebrew is garbage. So is Mac OS X.'
  set -x
  brew install "$PERCONA_56_FORMULA_URL"
  brew switch percona-server 5.6.28-76.1
  brew pin percona-server
  mysql.server stop ||:
  rm -f /usr/local/var/mysql/ib_logfile*
  mysql.server start ||:
  mysql_upgrade -uroot ||:
  launchctl unload "$PERCONA_LAUNCH_AGENT_PLIST_PATH"
  launchctl load "$PERCONA_LAUNCH_AGENT_PLIST_PATH"
  set +x
}

# If we don't do this, we sometimes get an error where a function called
# shell_session_update that, as I understand it, RVM adds to the environment to
# facilitate communication with Terminal.app on OS X. If it's not defined when
# we're done reloading RVM, let's just define it to silence that dumb error.
function do_shell_session_update_hack() {
  announce 'shell_session_update hack'
  type shell_session_update | grep 'shell function'
  [ $? = 0 ] || function shell_session_update() {
    :
  }
}

function set_up_homebrew() {
  announce 'Homebrew'
  brew update
  brew upgrade --all
  enough_time_passed && brew reinstall --HEAD fzf
  do_percona_hack
}

function set_up_neovim() {
  announce 'NeoVim'
  enough_time_passed && brew reinstall --HEAD neovim neovim-dot-app
  pip2 install --upgrade neovim
  pip3 install --upgrade neovim
}

function set_up_rvm() {
  announce 'RVM'
  # shellcheck disable=SC1091 disable=SC1090
  source "$HOME/.rvm/scripts/rvm"
  rvm get stable
  rvm reload
  do_shell_session_update_hack
}

function set_up_vim() {
  announce 'Vim plugins'
  nvim +PlugUpgrade +"source \$MYVIMRC" +PlugUpdate +qa
}

function set_up_apm() {
  announce 'APM'
  pushd "$APM_BUNDLE" &>/dev/null
    git checkout master || exit 1
    apm update
  popd &>/dev/null
}

function help() {
  printf "\
Usage: %b [-f]
" "$0"
}

function parse_options() {
  local OPTIND
  local OPTARG
  local opt
  while getopts 'hf' opt; do
    case "$opt" in
      f) OPTS__forcing=1 ;;
      h) help && exit 0 ;;
      *) help && exit 1 ;;
    esac
  done
}

function forcing() {
  [ ! -z $OPTS__forcing ]
}

function main() {
  parse_options "$*"
  forcing && reset_enough_time_passed
  set_up_homebrew
  set_up_rvm
  set_up_vim
  set_up_apm
  enough_time_passed && update_enough_time_passed
}

main "$*"
