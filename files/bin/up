#!/bin/bash

set -e

SCRIPT_NAME=$(basename "$0")

GREEN="\033[32m"
DEFAULT="\033[0m"

EXPENSIVE_TIMESTAMP="$HOME/.config/up/expensive_timestamp"
EXPENSIVE_INTERVAL=6
A_LONG_TIME=999999

PERCONA_LAUNCH_AGENT_PLIST_PATH=\
"$HOME/Library/LaunchAgents/homebrew.mxcl.percona-server.plist"

# Latest percona-server 5.6.x from Homebrew
PERCONA_56_FORMULA_URL=\
"https://raw.githubusercontent.com/Homebrew/homebrew-core/\
eb60a5d42468552a6b6467378340d38573b503b4/Formula/percona-server.rb"

USAGE="\
$SCRIPT_NAME: Update all the things!

Usage: $SCRIPT_NAME [OPTIONS]

OPTIONS:
  -f  Ignore \"expensive timestamp\" and force updating.
  -r  Delete \"expensive timestamp\" before updating.
  -v  Verbose mode. Enable stdout from scripts called by this script.
  -q  Quiet mode. Suppress stdout from this script.
  -h  Show this help

\"Expensive timestamp\" is a file that keeps track of the last time some of the
more expensive operations (e.g. recompiling NeoVim from source) were performed.
You can manually manipulate this file. It's here: $EXPENSIVE_TIMESTAMP"

function announce() {
  printf "%b%b%b...\n" "$GREEN" "$*" "$DEFAULT" >&3
}

function do_percona_hack() {
  announce 'Homebrew is garbage. So is Mac OS X.'
  brew install "$PERCONA_56_FORMULA_URL"
  brew switch percona-server 5.6.28-76.1
  brew pin percona-server
  mysql.server stop ||:
  rm -f /usr/local/var/mysql/ib_logfile*
  mysql.server start ||:
  mysql_upgrade -uroot ||:
  launchctl unload "$PERCONA_LAUNCH_AGENT_PLIST_PATH"
  launchctl load "$PERCONA_LAUNCH_AGENT_PLIST_PATH"
}

function do_npm_hack() {
  announce 'Homebrew is garbage. So is npm.'
  npm install -g npm@3.8.7
}

# If we don't do this, we sometimes get an error where a function called
# shell_session_update that, as I understand it, RVM adds to the environment to
# facilitate communication with Terminal.app on OS X. If it's not defined when
# we're done reloading RVM, let's just define it to silence that dumb error.
function do_shell_session_update_hack() {
  announce 'shell_session_update hack'
  type shell_session_update 2>/dev/null | grep 'shell function' >/dev/null
  [ $? = 0 ] || function shell_session_update() {
    :
  }
}

function update_homebrew() {
  announce 'Homebrew'
  brew update
  brew upgrade --all
  expensive brew reinstall --HEAD fzf
  do_percona_hack
  do_npm_hack
}

function update_neovim() {
  announce 'NeoVim'
  expensive brew reinstall --HEAD neovim neovim-dot-app
  pip2 install --upgrade neovim
  pip3 install --upgrade neovim
}

function update_rvm() {
  announce 'RVM'
  # shellcheck disable=SC1091 disable=SC1090
  source "$HOME/.rvm/scripts/rvm"
  rvm get stable
  rvm reload
  do_shell_session_update_hack
}

function update_vim() {
  announce 'Vim plugins'
  nvim +PlugUpgrade +"source \$MYVIMRC" +PlugUpdate +qa
}

function update_apm() {
  announce 'APM'
  pushd "$APM_BUNDLE" &>/dev/null
    git checkout master || exit 1
    apm update
  popd &>/dev/null
}

function help() {
  echo "$USAGE"
}

function parse_options() {
  local OPTIND OPTARG opt
  while getopts 'frvqh' opt; do
    case "$opt" in
      f) OPTS__forcing=1 ;;
      r) OPTS__resetting=1 ;;
      v) OPTS__verbose=1 ;;
      q) OPTS__quiet=1 ;;
      h) help && exit 0 ;;
      *) help && exit 1 ;;
    esac
  done
}

function is_quiet() {
  [ "$OPTS__quiet" == 1 ]
}

function is_verbose() {
  [ "$OPTS__verbose" == 1 ]
}
function forcing() {
  [ ! -z "$OPTS__forcing" ]
}

function resetting() {
  [ ! -z "$OPTS__resetting" ]
}

function update_expensive_operation_timestamp() {
  if doing_expensive_things; then
    mkdir -p "$(dirname "$EXPENSIVE_TIMESTAMP")"
    touch "$EXPENSIVE_TIMESTAMP"
  fi
}

function expensive() {
  if doing_expensive_things; then
    printf "%b\$\$\$%b:" "$GREEN" "$DEFAULT"
    "$@"
  else
    :
  fi
}

function days_since_expensive_timestamp_updated() {
  if expensive_timestamp_does_not_exist; then
    echo "$A_LONG_TIME"
  else
    find "$EXPENSIVE_TIMESTAMP" -mtime +$EXPENSIVE_INTERVAL | wc -l 2>/dev/null
  fi
}

function expensive_timestamp_does_not_exist() {
  [ ! -f "$EXPENSIVE_TIMESTAMP" ]
}

function doing_expensive_things() {
  forcing ||
    expensive_timestamp_does_not_exist ||
    [ "$(days_since_expensive_timestamp_updated)" -gt 0 ]
}

function set_up_io() {
  local null=/dev/null

  # fd 3 is stdout from this script
  # fd 4 is stderr from this script
  exec 3>&1
  exec 4>&2

  is_verbose || exec 1<>$null
  is_quiet   && exec 2<>$null
  :
}

function reset_expensive_timestamp() {
  rm -f "$EXPENSIVE_TIMESTAMP"
}

function main() {
  parse_options "$@"
  set_up_io

  resetting && reset_expensive_timestamp

  update_homebrew
  update_neovim
  update_rvm
  update_vim
  update_apm
  update_expensive_operation_timestamp
}

main "$@"
