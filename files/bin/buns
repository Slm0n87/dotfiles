#!/bin/bash

if [ "$DEBUG_BUNS" ]; then
  set -x
  exec 3>&1
else
  exec 3>/dev/null
fi

trap 'kill 0' INT TERM EXIT

readonly GREEN="\033[32m"
readonly BLUE="\033[34m"
readonly DEFAULT="\033[0m"
readonly BUNDLE_ARGS=(--quiet)

function cpu_cores {
  case $(uname) in
    Linux)
      n_cores="$(grep -c processor /proc/cpuinfo)"
      ;;
    Darwin)
      n_cores="$(sysctl -n hw.ncpu)"
      ;;
  esac
  echo "$n_cores"
}

function bundle_args {
  local args=( --quiet --jobs=$(cpu_cores) )
  echo "${args[@]}"
}

function bundle_with {
  local bundle_args gemfile dir
  bundle_args=($(bundle_args))
  gemfile="$1"
  dir="$(dirname "$gemfile")"

  echo -e "${GREEN}Bundling in ${BLUE}${dir}${DEFAULT}"
  pushd "$dir" >&3
  set -e
  bundle --local "${bundle_args[@]}" || bundle "${bundle_args[@]}"
  set +e
  popd >&3
}

function ensure_crucial_ruby_gems_are_installed {
  local gem
  for gem in bundler rake rubygems-bundler; do
    gem list -i $gem >&3 2>&1
    [ $? = 0 ] || gem install $gem
  done
}

function ensure_ruby_works {
  ruby --version >&3
  if [ $? != 0 ]; then
    echo "There seems to be a problem with your ruby environment" &&
    exit 1
  fi
}

function main {
  ensure_ruby_works
  ensure_crucial_ruby_gems_are_installed
  find . -name Gemfile | while read gemfile; do
    bundle_with "$gemfile"
  done
  gem regenerate_binstubs
}

main
